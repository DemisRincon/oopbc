{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { useEffect, useState } from \"react\";\nimport { Number0, Number1, Number2, Number3, Number4, Number5, Number6, Number7, Number8, Number9 } from '../constants';\nexport var useArrayConvertion = function useArrayConvertion(number, initalValue) {\n  var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var width = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n  var _useState = useState(initalValue),\n      numbers = _useState[0],\n      setNumbers = _useState[1];\n\n  var _useState2 = useState(initalValue),\n      numbersConsole = _useState2[0],\n      setNumbersConsole = _useState2[1];\n\n  useEffect(function () {\n    var array = Array.from(number);\n    var newArray = [];\n    var arrayToConsole = [];\n    array.map(function (item) {\n      switch (item) {\n        case \"0\":\n          newArray = [].concat(_toConsumableArray(newArray), [\"Cero\"]);\n          arrayToConsole = [].concat(_toConsumableArray(arrayToConsole), [Number0(height, width)]);\n          break;\n\n        case \"1\":\n          newArray = [].concat(_toConsumableArray(newArray), [\"One\"]);\n          arrayToConsole = [].concat(_toConsumableArray(arrayToConsole), [Number1(height, width)]);\n          break;\n\n        case \"2\":\n          newArray = [].concat(_toConsumableArray(newArray), [\"Two\"]);\n          arrayToConsole = [].concat(_toConsumableArray(arrayToConsole), [Number2(height, width)]);\n          break;\n\n        case \"3\":\n          newArray = [].concat(_toConsumableArray(newArray), [\"Three\"]);\n          arrayToConsole = [].concat(_toConsumableArray(arrayToConsole), [Number3(height, width)]);\n          break;\n\n        case \"4\":\n          newArray = [].concat(_toConsumableArray(newArray), [\"Four\"]);\n          arrayToConsole = [].concat(_toConsumableArray(arrayToConsole), [Number4(height, width)]);\n          break;\n\n        case \"5\":\n          newArray = [].concat(_toConsumableArray(newArray), [\"Five\"]);\n          arrayToConsole = [].concat(_toConsumableArray(arrayToConsole), [Number5(height, width)]);\n          break;\n\n        case \"6\":\n          newArray = [].concat(_toConsumableArray(newArray), [\"Six\"]);\n          arrayToConsole = [].concat(_toConsumableArray(arrayToConsole), [Number6(height, width)]);\n          break;\n\n        case \"7\":\n          newArray = [].concat(_toConsumableArray(newArray), [\"Seven\"]);\n          arrayToConsole = [].concat(_toConsumableArray(arrayToConsole), [Number7(height, width)]);\n          break;\n\n        case \"8\":\n          newArray = [].concat(_toConsumableArray(newArray), [\"Eight\"]);\n          arrayToConsole = [].concat(_toConsumableArray(arrayToConsole), [Number8(height, width)]);\n          break;\n\n        case \"9\":\n          newArray = [].concat(_toConsumableArray(newArray), [\"Nine\"]);\n          arrayToConsole = [].concat(_toConsumableArray(arrayToConsole), [Number9(height, width)]);\n          break;\n\n        default:\n          break;\n      }\n    });\n    setNumbers(newArray);\n    setNumbersConsole(arrayToConsole);\n  }, [number, height, width]);\n  return [{\n    numbers: numbers,\n    numbersConsole: numbersConsole\n  }];\n};","map":null,"metadata":{},"sourceType":"module"}